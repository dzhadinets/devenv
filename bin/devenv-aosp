#!/bin/bash

set -e

AOSP_CCACHE_BIN=${AOSP_CCACHE_BIN:-prebuilts/misc/linux-x86/ccache/ccache}

setup_ccache()
{
    if [ ! -f $AOSP_CCACHE_BIN ]; then
        return
    fi

    export CCACHE_DIR=/tmp/ccache
    export USE_CCACHE=1
}

delete_ccache()
{
    if [ ! -f $AOSP_CCACHE_BIN ]; then
        return
    fi

    $AOSP_CCACHE_BIN -C
}

create_ccache()
{
    if [ ! -f $AOSP_CCACHE_BIN ]; then
        return
    fi

    log_dbg "Setting up CCACHE with 10 GB"
    setup_ccache
    delete_ccache
    $AOSP_CCACHE_BIN -M 10G
}

AOSP_ENV_VERSION="0.1"
PATH=$PATH:$(cd $(dirname $0) && pwd -P)/../scripts/ source common-functions

call_help()
{
    # Commands and parameters list is used by bash completition
    # See ../scripts/completion.bash for more info
    echo "  shell|-- [<CMD>]                   	- launches shell inside the docker with optional command CMD"
    echo "  sync [<sync_params>]               	- sync sources"
    echo "  clean                              	- clean workdir"
    echo "  run [<emulator_params>]            	- run emulator"
    echo "  deploy                             	- deply target image"
    echo "  <sync_params>                      	- sync parameters"
    echo "    state                            	- get state of working directory"
    echo "    workspace                        	- additionally do build of workdir"
    echo "Examples:"
    echo "  m [<make_params>]                  	- Runs builds from the top of the tree"
    echo "  mma [<make_params>]                	- Builds all of the modules in the current directory, and their dependencies"
    echo "  mmma [<make_params>]               	- Builds all of the modules in the supplied directories, and their dependencies"
}

call_host()
{
    DEVENV_ROOT=${AOSP_VOL:-$PWD}

    log_info "Prepare AOSP dev environment."
    if [ ! -f "${DEVENV_ROOT}/$DEVENV_PROJECT_FILE" ]; then
        echo "The dir (${DEVENV_ROOT}) does not contain $DEVENV_PROJECT_FILE"
    else
        source ${DEVENV_ROOT}/$DEVENV_PROJECT_FILE
    fi

    if [ -z "$DOCKER_IMAGE" ]; then
        log_err "Please set environment AOSP_IMAGE. I.e. export DOCKER_IMAGE=devenv_android:aosp8"
        exit
    fi

    DEVENV_DOCKER_ROOT="/aosp"
    AOSP_OUT_DIR=${AOSP_OUT_DIR:-out}
    AOSP_OUT_DIR=${AOSP_OUT_DIR%/} # Trim trailing slash if needed (edited)
    DOCKER_ENVS+=";OUT_DIR=$AOSP_OUT_DIR"

    AOSP_VOL_CCACHE=${AOSP_VOL_CCACHE:-$AOSP_VOL/$AOSP_OUT_DIR/ccache}
    AOSP_VOL_CCACHE=${AOSP_VOL_CCACHE%/} # Trim trailing slash if needed
    mkdir -p "$AOSP_VOL_CCACHE"
    DOCKER_VOLUMES+=";$AOSP_VOL_CCACHE:/tmp/ccache"
}

call_docker()
{
    # Current dir is docker workdir.
    pushd $DEVENV_ROOT > /dev/null 2>&1

    AOSP_CONF_VERSION=""

    source $DEVENV_PROJECT_FILE

    MAJOR_ENV_VERSION=$(echo $AOSP_ENV_VERSION | cut -d. -f1)
    MAJOR_CONF_VERSION=$(echo $AOSP_CONF_VERSION | cut -d. -f1)

    if [ "$MAJOR_ENV_VERSION" != "$MAJOR_CONF_VERSION" ]; then
        if [ -z "$MAJOR_CONF_VERSION" ]; then
            log_err "Set AOSP_CONF_VERSION variable in $DEVENV_PROJECT_FILE"
        else
            log_err "Config versions are incompatible, Your is $MAJOR_CONF_VERSION. Env is $MAJOR_ENV_VERSION."
            log_err "Read the history of changes in README.md and update $DEVENV_PROJECT_FILE"
        fi
        exit 1
    fi

    if [ "$#" -eq 0 ]; then
        log_dbg "Build default target"
        # check for existing sources and do sync as needed
        STATE=$(do_state)
        if [ "$STATE" == "empty" ]; then
            log_dbg "'$PWD' dir does not contain sources. Syncing.."
            do_init
            create_ccache
        fi
        if [ "$STATE" != "ready" ]; then
            do_sync
            cd $DEVENV_ROOT
            do_prepare
            cd $DEVENV_ROOT
            do_workspace
            cd $DEVENV_ROOT
        else
            do_prepare
            cd $DEVENV_ROOT
        fi
        cd $DEVENV_ROOT
        do_build
        exit $?
    fi

    log_dbg "Prepare AOSP dev environment"
    setup_ccache
    do_prepare
    popd > /dev/null 2>&1

    case $1 in
        shell|--)
            shift
            if [ $# -eq 0 ]; then
                log_dbg "Enterring shell"
                exec bash
            else
                log_dbg "Execute command '$@' by path '$PWD'"
                exec "$@"
            fi
            ;;
        sync)
            shift
            if [ "$1" == "state" ];then
                 do_state
                 exit 0
            fi
            cd $DEVENV_ROOT
            do_sync "$@"
            cd $DEVENV_ROOT
            if [ "$1" == "workspace" ];then
                 shift
                 do_workspace
            fi
            ;;
        clean)
            shift
            do_clean "$@"
            delete_ccache
            ;;
        run)
            shift
            AVD=/emulator/android-sdk-linux/cmdline-tools/8.0/bin/avdmanager
            EMULATOR=/emulator/android-sdk-linux/emulator/emulator
            device=pixel_3
            avd_device=${device}_avd
            if test -f "$AVD"; then
                log_dbg "Creating Android device emulator"
                $AVD create avd --force --name $avd_device --abi google_apis/x86_64 --package "system-images;android-29;google_apis;x86_64" --device $device
                if test -f "$EMULATOR"; then
                    if $AVD list avd   | grep -q $avd_device; then
                        log_info "Running Android " $device  " emulator"
                        $EMULATOR @$avd_device  -no-audio -no-cache -no-snapshot &
                        bash
                    else
                        log_err "Emulator device creation failed"
                    fi
                else
                    log_err "No Emulator installed"
                fi
            else
                log_err "No Avdmanager installed"
            fi
            ;;
        *)
            log_info "Execute make by path $PWD with params: '$@'"
            make "$@" 2>&1 | tee build.out
            exit ${PIPESTATUS[0]}
            ;;
    esac
}

if [ "$(basename $0)" == "devenv_launcher.sh" ]; then
    call_docker "$@"
else
    source $(cd $(dirname $0) && pwd -P)/../scripts/common-launcher "$@"
fi
